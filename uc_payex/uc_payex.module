<?php
// $Id$

/**
 * @file
 * Integrates PayEx Payments with Ubercart
 *
 * You can turn on Transaction Callback in your PayEx account and
 * set the TC URL to http://{yoursite.com}/uc_payex/tc
 */

if (!class_exists('Px')) {
  require_once dirname(__FILE__) . '/library/Px/Px.php';
}


/**
 * Implementation of hook_menu()
 */
function uc_payex_menu() {
  $items = array();

  $items['uc_payex/confirm/%'] = array(
    'title' => 'PayEx Payment confirm',
    'page callback' => 'uc_payex_order_confirm',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  $items['uc_payex/cancel'] = array(
    'title' => 'PayEx Payment cancel',
    'page callback' => 'uc_payex_cancel',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  $items['uc_payex/tc'] = array(
    'title' => 'PayEx Transaction Callback',
    'page callback' => 'uc_payex_tc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  $items['admin/uc_payex_capture/%'] = array(
    'title' => 'Capture payment',
    'page callback' => 'uc_payex_capture_payment',
    'page arguments' => array(2),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  $items['admin/uc_payex_cancel/%'] = array(
    'title' => 'Cancel payment',
    'page callback' => 'uc_payex_cancel_payment',
    'page arguments' => array(2),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  $items['admin/store/orders/%/payments/%/refund'] = array(
    'title' => t('Refund: Order @order_id'),
    'title arguments' => array('@order_id' => 3),
    'description' => 'Process a credit card refund for an order.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_payex_refund_form', 3, 5),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_payex.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_uc_payment_method()
 */
function uc_payex_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_payex');

  $methods[] = array(
    'id' => 'payex',
    'name' => t('PayEx'),
    'title' => t('Payment using PayEx') . ' <img alt="PayEx Payments" src="' . $path . '/images/payex_small.gif" width="60" height="29" />',
    'review' => t('PayEx'),
    'desc' => t('Payment using PayEx'),
    'callback' => 'uc_payment_method_payex',
    'weight' => 0,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Callback for PayEx Payment Method settings
 * @param  $op
 * @param  $order
 * @return array
 */
function uc_payment_method_payex($op, &$order) {
  switch ($op) {
    case 'order-view':
      // Form for Order View
      $build = array();
      $transaction = uc_payex_transactions_load_by_order_id($order->order_id);
      if ($transaction) {
        $build['#markup'] = t('Transaction ID: @transaction_id', array('@transaction_id' => $transaction['transaction_id']));
        $build['#markup'] .= '<br />' . t('Transaction Status: @status', array('@status' => $transaction['transaction_status']));

        // Actions
        if ((int) $transaction['transaction_status'] === 3) {
          $capture_link = l(t('Capture'), 'admin/uc_payex_capture/' . $transaction['transaction_id'], array('query' => drupal_get_destination()));
          $cancel_link = l(t('Cancel'), 'admin/uc_payex_cancel/' . $transaction['transaction_id'], array('query' => drupal_get_destination()));
          $build['#markup'] .= '<br />' . t('Actions:');
          $build['#markup'] .= '<br />' . $capture_link . ' ' . $cancel_link;
        }
      }

      return $build;
    case 'settings':
      // Form for PayEx Settings
      $form = array();
      $form['uc_payex_account'] = array(
        '#type' => 'textfield',
        '#title' => t('Account Number'),
        '#description' => t('Account Number of PayEx Merchant.'),
        '#default_value' => variable_get('uc_payex_account', ''),
      );
      $form['uc_payex_encryption_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Encryption Key'),
        '#description' => t('PayEx Encryption Key of PayEx Merchant.'),
        '#default_value' => variable_get('uc_payex_encryption_key', ''),
      );
      $form['uc_payex_testmode'] = array(
        '#type' => 'select',
        '#title' => t('Test Mode'),
        '#description' => t('Enable PayEx Test Mode'),
        '#options' => array(
          'yes' => t('Yes'),
          'no' => t('No')
        ),
        '#default_value' => variable_get('uc_payex_testmode', 'yes'),
      );
      $form['uc_payex_purchase_operation'] = array(
        '#type' => 'select',
        '#title' => t('Purchase Operation'),
        '#description' => t('If used AUTHORIZATION then amount will be authorized (2-phased transaction). If used SALE then amount will be captured (1-phased transaction).'),
        '#options' => array(
          'AUTHORIZATION' => t('Authorization'),
          'SALE' => t('Sale')
        ),
        '#default_value' => variable_get('uc_payex_purchase_operation', 'SALE'),
      );
      $form['uc_payex_payment_view'] = array(
        '#type' => 'select',
        '#title' => t('Payment View'),
        '#description' => t('Default payment method.'),
        '#options' => array(
          'PX' => t('Payment Menu'),
          'CREDITCARD' => t('Credit Card'),
          'INVOICE' => t('Invoice'),
          'DIRECTDEBIT' => t('Direct Debit'),
          'PAYPAL' => t('PayPal'),
        ),
        '#default_value' => variable_get('uc_payex_payment_view', 'PX'),
      );
      $form['uc_payex_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Language of pages displayed by PayEx during payment.'),
        '#options' => array(
          'en-US' => t('English'),
          'sv-SE' => t('Swedish'),
          'nb-NO' => t('Norway'),
          'da-DK' => t('Danish'),
          'es-ES' => t('Spanish'),
          'de-DE' => t('German'),
          'fi-FI' => t('Finnish'),
          'fr-FR' => t('French'),
          'pl-PL' => t('Polish'),
          'cs-CZ' => t('Czech'),
          'hu-HU' => t('Hungarian')
        ),
        '#default_value' => variable_get('uc_payex_language', 'en-US'),
      );
      $form['uc_payex_responsive'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Responsive Skinning'),
        '#description' => t('Use Responsive web design on PayEx pages'),
        '#default_value' => variable_get('uc_payex_responsive', FALSE),
      );
      return $form;
    case 'order-submit':
      $order_id = $order->order_id;

      // Check transactions of order
      if (uc_payex_transactions_load_by_order_id($order_id)) {
        drupal_set_message(t('Order @order_id already placed', array('@order_id' => $order_id)), 'error');
        drupal_goto('cart/checkout');
        return;
      }

      // Set status
      uc_order_update_status($order->order_id, uc_order_state_default('in_checkout'));

      // Get Px
      $px = new Px();
      $px->setEnvironment(
        variable_get('uc_payex_account', ''),
        variable_get('uc_payex_encryption_key', ''),
        variable_get('uc_payex_testmode', 'yes') === 'yes'
      );

      $payment_view = variable_get('uc_payex_payment_view', 'PX');

      $additional = $payment_view === 'PX' ? 'PAYMENTMENU=TRUE' : '';
      if (variable_get('uc_payex_responsive', FALSE)) {
        $separator = (!empty($additional) && mb_substr($additional, -1) !== '&') ? '&' : '';
        $additional .= $separator . 'USECSS=RESPONSIVEDESIGN';
      }

      // Call PxOrder.Initialize8
      $params = array(
        'accountNumber' => '',
        'purchaseOperation' => variable_get('uc_payex_purchase_operation', 'SALE'),
        'price' => round($order->order_total * 100),
        'priceArgList' => '',
        'currency' => $order->currency,
        'vat' => 0,
        'orderID' => $order->order_id,
        'productNumber' => 1,
        'description' => variable_get('site_name', 'Ubercart'),
        'clientIPAddress' => ip_address(),
        'clientIdentifier' => 'USERAGENT=' . $_SERVER['HTTP_USER_AGENT'],
        'additionalValues' => $additional,
        'externalID' => '',
        'returnUrl' => url('uc_payex/confirm/' . $order->order_id, array('absolute' => TRUE)),
        'view' => $payment_view,
        'agreementRef' => '',
        'cancelUrl' => url('uc_payex/cancel', array('absolute' => TRUE)),
        'clientLanguage' => variable_get('uc_payex_language', 'en-US')
      );

      $result = $px->Initialize8($params);
      if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
        $error_message = uc_payex_extract_error_message($result);
        watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
        drupal_set_message($error_message, 'error');
        drupal_goto('cart/checkout');
        return;
      }

      $orderRef = $result['orderRef'];
      $redirectUrl = $result['redirectUrl'];

      // add Order Lines
      $i = 1;
      foreach ($order->products as $_id => $product) {
        $price = (float) $product->price;
        $qty = (int) $product->qty;
        $tax_amount = 0;
        $tax_percent = 0;

        // Calculate tax
        if (module_exists('uc_taxes')) {
          list($tax_amount, $suffixes) = uc_payex_get_included_tax($product, $order);
          $tax_percent = ($tax_amount > 0) ? round(100 / ($price / $tax_amount)) : 0;
        }

        // Call PxOrder.AddSingleOrderLine2
        $params = array(
          'accountNumber' => '',
          'orderRef' => $orderRef,
          'itemNumber' => $i,
          'itemDescription1' => $product->title,
          'itemDescription2' => '',
          'itemDescription3' => '',
          'itemDescription4' => '',
          'itemDescription5' => '',
          'quantity' => $qty,
          'amount' => (int) (100 * ($qty * ($price + $tax_amount))),
          'vatPrice' => (int) (100 * ($qty * $tax_amount)),
          'vatPercent' => (int) (100 * $tax_percent)
        );
        $result = $px->AddSingleOrderLine2($params);
        if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
          $error_message = uc_payex_extract_error_message($result);
          watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
          drupal_set_message($error_message, 'error');
          drupal_goto('cart/checkout');
          return;
        }

        $i++;
      }

      // Add Shipping Line
      foreach ($order->line_items as $_id => $item) {
        if ($item['type'] === 'shipping') {
          $shipping_price = (float) $item['amount'];
          $shipping_price_with_tax = uc_payex_get_shipping_price_with_tax($shipping_price);
          $shipping_tax = $shipping_price_with_tax - $shipping_price;
          $tax_percent = ($shipping_tax > 0) ? round(100 / ($shipping_price / $shipping_tax)) : 0;

          // Call PxOrder.AddSingleOrderLine2
          $params = array(
            'accountNumber' => '',
            'orderRef' => $orderRef,
            'itemNumber' => $i,
            'itemDescription1' => $item['title'],
            'itemDescription2' => '',
            'itemDescription3' => '',
            'itemDescription4' => '',
            'itemDescription5' => '',
            'quantity' => 1,
            'amount' => (int) (100 * $shipping_price_with_tax),
            'vatPrice' => (int) (100 * $shipping_tax),
            'vatPercent' => (int) (100 * $tax_percent)
          );
          $result = $px->AddSingleOrderLine2($params);
          if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
            $error_message = uc_payex_extract_error_message($result);
            watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
            drupal_set_message($error_message, 'error');
            drupal_goto('cart/checkout');
            return;
          }

          $i++;
        }
      }

      // Add Order Address
      $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
      if (!$billing_country) {
        $billing_country = array(
          0 => array(
            'country_name' => 'United States',
            'country_iso_code_2' => 'US'
          )
        );
      }

      // Call PxOrder.AddOrderAddress2
      $params = array(
        'accountNumber' => '',
        'orderRef' => $orderRef,
        'billingFirstName' => $order->billing_first_name,
        'billingLastName' => $order->billing_last_name,
        'billingAddress1' => $order->billing_street1,
        'billingAddress2' => $order->billing_street2,
        'billingAddress3' => '',
        'billingPostNumber' => $order->billing_postal_code,
        'billingCity' => $order->billing_city,
        'billingState' => uc_zone_get_by_id($order->billing_zone),
        'billingCountry' => $billing_country[0]['country_name'],
        'billingCountryCode' => $billing_country[0]['country_iso_code_2'],
        'billingEmail' => $order->primary_email,
        'billingPhone' => $order->billing_phone,
        'billingGsm' => '',
      );

      $shipping_params = array(
        'deliveryFirstName' => '',
        'deliveryLastName' => '',
        'deliveryAddress1' => '',
        'deliveryAddress2' => '',
        'deliveryAddress3' => '',
        'deliveryPostNumber' => '',
        'deliveryCity' => '',
        'deliveryState' => '',
        'deliveryCountry' => '',
        'deliveryCountryCode' => '',
        'deliveryEmail' => '',
        'deliveryPhone' => '',
        'deliveryGsm' => '',
      );

      // Add delivery information
      if (uc_order_is_shippable($order)) {
        $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
        if (!$delivery_country) {
          $delivery_country = array(
            0 => array(
              'country_name' => 'United States',
              'country_iso_code_2' => 'US'
            )
          );
        }

        $shipping_params = array(
          'deliveryFirstName' => $order->delivery_first_name,
          'deliveryLastName' => $order->delivery_last_name,
          'deliveryAddress1' => $order->delivery_street1,
          'deliveryAddress2' => $order->delivery_street2,
          'deliveryAddress3' => '',
          'deliveryPostNumber' => $order->delivery_postal_code,
          'deliveryCity' => $order->delivery_city,
          'deliveryState' => uc_zone_get_by_id($order->delivery_zone),
          'deliveryCountry' => $delivery_country[0]['country_name'],
          'deliveryCountryCode' => $delivery_country[0]['country_iso_code_2'],
          'deliveryEmail' => $order->primary_email,
          'deliveryPhone' => $order->delivery_phone,
          'deliveryGsm' => ''
        );
      }

      $params += $shipping_params;

      $result = $px->AddOrderAddress2($params);
      if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
        $error_message = uc_payex_extract_error_message($result);
        watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
        drupal_set_message($error_message, 'error');
        drupal_goto('cart/checkout');
        return;
      }

      // Redirect to PayEx
      drupal_goto($redirectUrl);      
  }
}

/**
 * Implementation of hook_form_alter()
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function uc_payex_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($_SESSION['cart_order'])) {
    return;
  }

  // Payments form on Order View page
  if ($form_id == 'uc_payment_by_order_form') {
    //Add a refund link to the payments table form
    $order_id = $form['order_id']['#value'];
    $payments = uc_payment_load_payments($order_id);
    if ($payments) {
      foreach ($payments as $payment) {
        $data = unserialize($payment->data);
        if ($data['transaction_id']) {
          $transaction = uc_payex_transaction_load($data['transaction_id']);
          if (in_array($transaction->transaction_status, array('0', '6'))) {
            $refund = l(t('Refund'), 'admin/store/orders/' . $order_id . '/payments/' . $payment->receipt_id . '/refund');
            $form['payments'][$payment->receipt_id]['action']['#markup'] .= '<br/>' . $refund;
          }
        }
      }
    }
  }
}

/**
 * Add PayEx Transaction
 * @param $order_id
 * @param $transaction_id
 * @param $transaction_status
 * @param $transaction_data
 * @param null $date
 * @return DatabaseStatementInterface|int
 * @throws Exception
 */
function uc_payex_transaction_add($order_id, $transaction_id, $transaction_status, $transaction_data, $date = NULL) {
  $id = db_insert('uc_payex_transactions')
    ->fields(array(
      'order_id' => $order_id,
      'transaction_id' => $transaction_id,
      'transaction_status' => $transaction_status,
      'transaction_data' => serialize($transaction_data),
      'date' => date('Y-m-d H:i:s', is_null($date) ? time() : $date),
    ))
    ->execute();

  return $id;
}

/**
 * Load PayEx Transaction
 * @param $transaction_id
 * @return mixed
 */
function uc_payex_transaction_load($transaction_id) {
  $select = db_select('uc_payex_transactions')
    ->fields('uc_payex_transactions')
    ->condition('transaction_id', $transaction_id, '=');

  return $select->execute()->fetch();
}

/**
 * Load PayEx Transactions by Order Id
 * @param $order_id
 * @return mixed
 */
function uc_payex_transactions_load_by_order_id($order_id) {
  $select = db_select('uc_payex_transactions')
    ->fields('uc_payex_transactions')
    ->condition('order_id', $order_id, '=')
    ->orderBy('date', 'DESC');

  return $select->execute()->fetchAssoc();
}

/**
 * Calculates the taxes that should be included in a product's display price.
 * This function like uc_taxes_get_included_tax()
 * @param $product
 * @param $order
 * @return array
 */
function uc_payex_get_included_tax($product, $order) {
  $amount = 0;
  $suffixes = array();
  foreach (uc_taxes_filter_rates($order) as $tax) {
    $taxable = uc_taxes_apply_item_tax($product, $tax);
    if (!empty($taxable)) {
      $amount += $taxable * $tax->rate;
      $suffixes[$tax->inclusion_text] = $tax->inclusion_text;
    }
  }

  return array($amount, $suffixes);
}

/**
 * Get Shipping Price with Tax
 * @param $price
 * @return mixed
 */
function uc_payex_get_shipping_price_with_tax($price) {
  // Display shipping quote including tax (if enabled and tax applied)
  if (module_exists('uc_taxes')) {
    $tax_rates = uc_taxes_rate_load(NULL);
    foreach ($tax_rates as $tax) {
      if (in_array('shipping', $tax->taxed_line_items)) {
        $price = $price * (1 + $tax->rate);
      }
    }
  }

  return $price;
}

/**
 * Get verbose error message by Error Code
 * @param $errorCode
 * @return string | false
 */
function uc_payex_get_error_message($errorCode) {
  $errorMessages = array(
    'REJECTED_BY_ACQUIRER' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    'Error_Generic' => t('An unhandled exception occurred'),
    '3DSecureDirectoryServerError' => t('A problem with Visa or MasterCards directory server, that communicates transactions for 3D-Secure verification'),
    'AcquirerComunicationError' => t('Communication error with the acquiring bank'),
    'AmountNotEqualOrderLinesTotal' => t('The sum of your order lines is not equal to the price set in initialize'),
    'CardNotEligible' => t('Your customers card is not eligible for this kind of purchase, your customer can contact their bank for more information'),
    'CreditCard_Error' => t('Some problem occurred with the credit card, your customer can contact their bank for more information'),
    'PaymentRefusedByFinancialInstitution' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    'Merchant_InvalidAccountNumber' => t('The merchant account number sent in on request is invalid'),
    'Merchant_InvalidIpAddress' => t('The IP address the request comes from is not registered in PayEx, you can set it up in PayEx Admin under Merchant profile'),
    'Access_MissingAccessProperties' => t('The merchant does not have access to requested functionality'),
    'Access_DuplicateRequest' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    'Admin_AccountTerminated' => t('The merchant account is not active'),
    'Admin_AccountDisabled' => t('The merchant account is not active'),
    'ValidationError_AccountLockedOut' => t('The merchant account is locked out'),
    'ValidationError_Generic' => t('Generic validation error'),
    'ValidationError_HashNotValid' => t('The hash on request is not valid, this might be due to the encryption key being incorrect'),
    //'ValidationError_InvalidParameter' => t('One of the input parameters has invalid data. See paramName and description for more information'),
    'OperationCancelledbyCustomer' => t('The operation was cancelled by the client'),
    'PaymentDeclinedDoToUnspecifiedErr' => t('Unexpecter error at 3rd party'),
    'InvalidAmount' => t('The amount is not valid for this operation'),
    'NoRecordFound' => t('No data found'),
    'OperationNotAllowed' => t('The operation is not allowed, transaction is in invalid state'),
    'ACQUIRER_HOST_OFFLINE' => t('Could not get in touch with the card issuer'),
    'ARCOT_MERCHANT_PLUGIN_ERROR' => t('The card could not be verified'),
    'REJECTED_BY_ACQUIRER_CARD_BLACKLISTED' => t('There is a problem with this card'),
    'REJECTED_BY_ACQUIRER_CARD_EXPIRED' => t('The card expired'),
    'REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS' => t('Insufficient funds'),
    'REJECTED_BY_ACQUIRER_INVALID_AMOUNT' => t('Incorrect amount'),
    'USER_CANCELED' => t('Payment cancelled'),
    'CardNotAcceptedForThisPurchase' => t('Your Credit Card not accepted for this purchase')
  );
  $errorMessages = array_change_key_case($errorMessages, CASE_UPPER);
  $errorCode = mb_strtoupper($errorCode);
  return isset($errorMessages[$errorCode]) ? $errorMessages[$errorCode] : FALSE;
}

/**
 * Extract Error Message from PayEx data
 * @param array $details
 * @return null|string
 */
function uc_payex_extract_error_message(array $details) {
  $errorCode = isset($details['transactionErrorCode']) ? $details['transactionErrorCode'] : $details['errorCode'];
  $errorMessage = uc_payex_get_error_message($errorCode);
  if ($errorMessage) {
    return $errorMessage;
  }

  $errorCode = isset($details['transactionErrorCode']) ? $details['transactionErrorCode'] : '';
  $errorDescription = isset($details['transactionThirdPartyError']) ? $details['transactionThirdPartyError'] : '';
  if (empty($errorCode) && empty($errorDescription)) {
    $errorCode = $details['code'];
    $errorDescription = $details['description'];
  }

  return t('PayEx error: @message', array('@message' => $errorCode . ' (' . $errorDescription . ')'));
}