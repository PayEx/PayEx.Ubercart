<?php
// $Id$

/**
 * @file
 * Integrates PayEx Factoring and  PayEx Part Payment with Ubercart
 * @todo Add refund feature
 * @todo Add invoice link
 */

if (!class_exists('Px')) {
  require_once dirname(__FILE__) . '/library/Px/Px.php';
}

/**
 * Implementation of hook_menu()
 */
function uc_factoring_menu() {
  $items = array();

  $items['admin/uc_factoring_capture/%'] = array(
    'title' => 'Capture payment',
    'page callback' => 'uc_factoring_capture_payment',
    'page arguments' => array(2),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_factoring.pages.inc',
  );

  $items['admin/uc_factoring_cancel/%'] = array(
    'title' => 'Cancel payment',
    'page callback' => 'uc_factoring_cancel_payment',
    'page arguments' => array(2),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_factoring.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_uc_payment_method()
 */
function uc_factoring_uc_payment_method() {
  $methods[] = array(
    'id' => 'payex_factoring',
    'name' => t('PayEx Factoring'),
    'title' => t('Payment using PayEx Factoring'),
    'review' => t('PayEx Factoring'),
    'desc' => t('Payment using PayEx Factoring'),
    'callback' => 'uc_payment_method_factoring',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  $methods[] = array(
    'id' => 'payex_financing_invoice',
    'name' => t('PayEx Financing Invoice'),
    'title' => t('Payment using PayEx Financing Invoice'),
    'review' => t('PayEx Financing Invoice'),
    'desc' => t('Payment using PayEx Financing Invoice'),
    'callback' => 'uc_payment_method_financing_invoice',
    'weight' => 2,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  $methods[] = array(
    'id' => 'payex_partpayment',
    'name' => t('PayEx Part Payment'),
    'title' => t('Payment using PayEx Part Payment'),
    'review' => t('PayEx Part Payment'),
    'desc' => t('Payment using PayEx Part Payment'),
    'callback' => 'uc_payment_method_partpayment',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Callback for PayEx Payment Method settings
 * @param $op
 * @param $order
 * @param null $form
 * @param null $form_state
 * @return array|mixed|null|void
 */
function uc_payment_method_factoring($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      // Add SSN field to Checkout form
      $details = uc_payment_method_factoring_form(array(), $form_state, $order);
      return $details;
    case 'cart-process':
      // Validate Social Security Number
      // Get Country Code
      $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
      if (!$billing_country) {
        $billing_country = array(
          0 => array(
            'country_name' => 'United States',
            'country_iso_code_2' => 'US'
          )
        );
      }

      // Set Details
      $form_state['input']['panes']['payment']['details']['billing_country_code'] = $billing_country[0]['country_iso_code_2'];

      // Get Zip Code
      $zip_code = '';
      if (isset($form_state['input']['panes']['delivery']['delivery_postal_code'])) {
        $zip_code = $form_state['input']['panes']['delivery']['delivery_postal_code'];
      } elseif (isset($form_state['input']['panes']['billing']['billing_postal_code'])) {
        $zip_code = $form_state['input']['panes']['billing']['billing_postal_code'];
      }

      // Get Px
      $px = new Px();
      $px->setEnvironment(
        variable_get('uc_factoring_account', ''),
        variable_get('uc_factoring_encryption_key', ''),
        variable_get('uc_factoring_testmode', 'yes') === 'yes'
      );

      // Call PxOrder.GetAddressByPaymentMethod
      $params = array(
        'accountNumber' => '',
        'paymentMethod' => $billing_country[0]['country_iso_code_2'] === 'SE' ? 'PXFINANCINGINVOICESE' : 'PXFINANCINGINVOICENO',
        'ssn' => $form_state['input']['panes']['payment']['details']['social_security_number'],
        'zipcode' => $zip_code,
        'countryCode' => $billing_country[0]['country_iso_code_2'],
        'ipAddress' => ip_address()
      );
      $result = $px->GetAddressByPaymentMethod($params);
      if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
        if (preg_match('/\bInvalid parameter:SocialSecurityNumber\b/i', $result['description'])) {
          form_set_error('panes][payment][details][social_security_number', t('Invalid Social Security Number'));
          return false;
        }

        form_set_error('panes][payment][details][social_security_number', uc_factoring_extract_error_message($result));
        return false;
      }

      // Save Details
      $_SESSION['factoring'] = $form_state['input']['panes']['payment']['details'];
      return true;
    case 'order-view':
      // Form for Order View
      $build = array();
      $transaction = uc_factoring_transactions_load_by_order_id($order->order_id);
      if ($transaction) {
        $build['#markup'] = t('Transaction ID: @transaction_id', array('@transaction_id' => $transaction['transaction_id']));
        $build['#markup'] .= '<br />' . t('Transaction Status: @status', array('@status' => $transaction['transaction_status']));

        // Actions
        if ((int) $transaction['transaction_status'] === 3) {
          $capture_link = l(t('Capture'), 'admin/uc_factoring_capture/' . $transaction['transaction_id'], array('query' => drupal_get_destination()));
          $cancel_link = l(t('Cancel'), 'admin/uc_factoring_cancel/' . $transaction['transaction_id'], array('query' => drupal_get_destination()));
          $build['#markup'] .= '<br />' . t('Actions:');
          $build['#markup'] .= '<br />' . $capture_link . ' ' . $cancel_link;
        }
      }

      return $build;
    case 'settings':
      // Form for PayEx Settings
      $form = array();
      $form['uc_factoring_account'] = array(
        '#type' => 'textfield',
        '#title' => t('Account Number'),
        '#description' => t('Account Number of PayEx Merchant.'),
        '#default_value' => variable_get('uc_factoring_account', ''),
      );
      $form['uc_factoring_encryption_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Encryption Key'),
        '#description' => t('PayEx Encryption Key of PayEx Merchant.'),
        '#default_value' => variable_get('uc_factoring_encryption_key', ''),
      );
      $form['uc_factoring_testmode'] = array(
        '#type' => 'select',
        '#title' => t('Test Mode'),
        '#description' => t('Enable PayEx Test Mode'),
        '#options' => array(
          'yes' => t('Yes'),
          'no' => t('No')
        ),
        '#default_value' => variable_get('uc_factoring_testmode', 'yes'),
      );
      $form['uc_factoring_language'] = array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#description' => t('Language of pages displayed by PayEx during payment.'),
        '#options' => array(
          'en-US' => t('English'),
          'sv-SE' => t('Swedish'),
          'nb-NO' => t('Norway'),
          'da-DK' => t('Danish'),
          'es-ES' => t('Spanish'),
          'de-DE' => t('German'),
          'fi-FI' => t('Finnish'),
          'fr-FR' => t('French'),
          'pl-PL' => t('Polish'),
          'cs-CZ' => t('Czech'),
          'hu-HU' => t('Hungarian')
        ),
        '#default_value' => variable_get('uc_factoring_language', 'en-US'),
      );
      return $form;

    case 'order-submit':
      if (!isset($_SESSION['factoring'])) {
        drupal_set_message(t('Social Security Number is empty'), 'error');
        drupal_goto('cart/checkout');
        return;
      }

      // Restore Details
      $order->payment_details = $_SESSION['factoring'];
      unset($_SESSION['factoring']);

      $order_id = $order->order_id;

      // Check transactions of order
      if (uc_factoring_transactions_load_by_order_id($order_id)) {
        unset($_SESSION['cart_order']);
        drupal_set_message(t('Order @order_id already placed', array('@order_id' => $order_id)), 'error');
        drupal_goto('cart/checkout');
        return;
      }

      // Set status
      uc_order_update_status($order->order_id, uc_order_state_default('in_checkout'));

      // Get Px
      $px = new Px();
      $px->setEnvironment(
        variable_get('uc_factoring_account', ''),
        variable_get('uc_factoring_encryption_key', ''),
        variable_get('uc_factoring_testmode', 'yes') === 'yes'
      );

      $views = array(
        'payex_financing_invoice' => 'FINANCING',
        'payex_factoring' => 'FACTORING',
        'payex_partpayment' => 'CREDITACCOUNT',
      );

      // Call PxOrder.Initialize8
      $params = array(
        'accountNumber' => '',
        'purchaseOperation' => 'AUTHORIZATION',
        'price' => round($order->order_total * 100),
        'priceArgList' => '',
        'currency' => $order->currency,
        'vat' => 0,
        'orderID' => $order->order_id,
        'productNumber' => 1,
        'description' => variable_get('site_name', 'Ubercart'),
        'clientIPAddress' => ip_address(),
        'clientIdentifier' => '',
        'additionalValues' => '',
        'externalID' => '',
        'returnUrl' => 'http://localhost.no/return',
        'view' => $views[$order->payment_method],
        'agreementRef' => '',
        'cancelUrl' => 'http://localhost.no/cancel',
        'clientLanguage' => variable_get('uc_factoring_language', 'en-US')
      );

      $result = $px->Initialize8($params);
      if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
        $error_message = uc_factoring_extract_error_message($result);
        watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
        drupal_set_message($error_message, 'error');
        drupal_goto('cart/checkout');
        return;
      }

      $orderRef = $result['orderRef'];

      // Perform Payment
      switch ($views[$order->payment_method]) {
        case 'FINANCING':
          // Call PxOrder.PurchaseFinancingInvoice
          $params = array(
            'accountNumber' => '',
            'orderRef' => $orderRef,
            'socialSecurityNumber' => $order->payment_details['social_security_number'],
            'legalName' => $order->billing_first_name . ' ' . $order->billing_last_name,
            'streetAddress' => trim($order->billing_street1 . ' ' . $order->billing_street2),
            'coAddress' => '',
            'zipCode' => $order->billing_postal_code,
            'city' => $order->billing_city,
            'countryCode' => $order->payment_details['billing_country_code'],
            'paymentMethod' => $order->payment_details['billing_country_code'] === 'SE' ? 'PXFINANCINGINVOICESE' : 'PXFINANCINGINVOICENO',
            'email' => $order->primary_email,
            'msisdn' => (substr($order->billing_phone, 0, 1) === '+') ? $order->billing_phone : '+' . $order->billing_phone,
            'ipAddress' => ip_address()
          );

          $result = $px->PurchaseFinancingInvoice($params);
          break;
        case 'FACTORING':
          // Call PxOrder.PurchaseInvoiceSale
          $params = array(
            'accountNumber' => '',
            'orderRef' => $orderRef,
            'socialSecurityNumber' => $order->payment_details['social_security_number'],
            'legalFirstName' => $order->billing_first_name,
            'legalLastName' => $order->billing_last_name,
            'legalStreetAddress' => trim($order->billing_street1 . ' ' . $order->billing_street2),
            'legalCoAddress' => '',
            'legalPostNumber' => $order->billing_postal_code,
            'legalCity' => $order->billing_city,
            'legalCountryCode' => $order->payment_details['billing_country_code'],
            'email' => $order->primary_email,
            'msisdn' => (substr($order->billing_phone, 0, 1) === '+') ? $order->billing_phone : '+' . $order->billing_phone,
            'ipAddress' => ip_address(),
          );

          $result = $px->PurchaseInvoiceSale($params);
          break;
        case 'CREDITACCOUNT':
          // Call PxOrder.PurchasePartPaymentSale
          $params = array(
            'accountNumber' => '',
            'orderRef' => $orderRef,
            'socialSecurityNumber' => $order->payment_details['social_security_number'],
            'legalFirstName' => $order->billing_first_name,
            'legalLastName' => $order->billing_last_name,
            'legalStreetAddress' => trim($order->billing_street1 . ' ' . $order->billing_street2),
            'legalCoAddress' => '',
            'legalPostNumber' => $order->billing_postal_code,
            'legalCity' => $order->billing_city,
            'legalCountryCode' => $order->payment_details['billing_country_code'],
            'email' => $order->primary_email,
            'msisdn' => (substr($order->billing_phone, 0, 1) === '+') ? $order->billing_phone : '+' . $order->billing_phone,
            'ipAddress' => ip_address(),
          );

          $result = $px->PurchasePartPaymentSale($params);
          break;
        default:
          drupal_set_message(t('Invalid payment mode'), 'error');
          drupal_goto('cart/checkout');
          return;
      }

      if ($result['code'] !== 'OK' || $result['description'] !== 'OK' || $result['errorCode'] !== 'OK') {
        if (preg_match('/\bInvalid parameter:msisdn\b/i', $result['description'])) {
          drupal_set_message(t('Phone number not recognized, please use +countrycodenumber  ex. +467xxxxxxxxxx'), 'error');
          drupal_goto('cart/checkout');
          return;
        }

        $error_message = uc_factoring_extract_error_message($result);
        watchdog('PayEx error', $error_message, array(), WATCHDOG_WARNING);
        drupal_set_message($error_message, 'error');
        drupal_goto('cart/checkout');
        return;
      }

      // Save Transaction
      uc_factoring_transaction_add($order_id, $result['transactionNumber'], $result['transactionStatus'], $result);

      /**
       * Transaction statuses:
       * 0=Sale, 1=Initialize, 2=Credit, 3=Authorize, 4=Cancel, 5=Failure, 6=Capture
       */
      switch ((int) $result['transactionStatus']) {
        case 0:
        case 6:
          $message = t('Transaction captured. Transaction Id: @transaction_id', array('@transaction_id' => $result['transactionNumber']));
          uc_order_comment_save($order_id, $order->uid, $message, 'admin');
          uc_payment_enter($order_id, $order->payment_method, $order->order_total, $order->uid, array('transaction_id' => $result['transactionNumber']), $message);
          uc_order_update_status($order_id, uc_order_state_default('completed'));

          $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
          drupal_goto('cart/checkout/complete');
          break;
        case 1:
          $message = t('Transaction is pending. Transaction Id: @transaction_id', array('@transaction_id' => $result['transactionNumber']));
          uc_order_comment_save($order_id, $order->uid, $message, 'admin');

          $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
          drupal_goto('cart/checkout/complete');
          break;
        case 3:
          $message = t('Transaction authorized. Transaction Id: @transaction_id', array('@transaction_id' => $result['transactionNumber']));
          uc_order_comment_save($order_id, $order->uid, $message, 'admin');
          uc_order_update_status($order_id, uc_order_state_default('payment_received'));

          $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
          drupal_goto('cart/checkout/complete');
          break;
        case 4:
          $message = t('Order was canceled');
          uc_order_comment_save($order_id, $order->uid, $message, 'admin');
          uc_order_update_status($order_id, uc_order_state_default('canceled'));

          drupal_set_message($message, 'warning');
          drupal_goto('cart/checkout');
          break;
        case 5:
        default:
          // Cancel when Error
          $message = t('Transaction is failed.');
          if (!empty($result['transactionNumber'])) {
            $message = t('Transaction is failed. Transaction Id: @transaction_id', array('@transaction_id' => $result['transactionNumber']));
          }
          $message .= t('Details: @details', array('@details' => uc_factoring_extract_error_message($result)));

          uc_order_comment_save($order_id, $order->uid, $message, 'admin');
          uc_order_update_status($order_id, uc_order_state_default('canceled'));

          drupal_set_message($message, 'error');
          drupal_goto('cart/checkout');
          break;
      }
  }
}

/**
 * Displays the Social Security Number form on the checkout screen
 * @param $form
 * @param $form_state
 * @param $order
 * @return mixed
 */
function uc_payment_method_factoring_form($form, &$form_state, $order) {
  $form['ssn_label'] = array(
    '#markup' => '<p>' . t('Please enter your Social Security Number.') . '</p>'
  );

  $form['social_security_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Social Security Number'),
    '#default_value' => isset($form_state['input']['panes']['payment']['details']['social_security_number']) ? $form_state['input']['panes']['payment']['details']['social_security_number'] : '',
    '#attributes' => array('autocomplete' => 'off'),
    '#size' => 32,
    '#maxlength' => 64,
  );

  return $form;
}

/**
 * Callback for PayEx Part Payment Method
 * @param  $op
 * @param  $order
 * @return array
 */
function uc_payment_method_partpayment($op, &$order, $form = NULL, &$form_state = NULL) {
  if ($op === 'settings') {
    // Uses a common settings form
    return false;
  }

  return uc_payment_method_factoring($op, $order, $form, $form_state);
}

/**
 * Callback for PayEx Part Payment Method
 * @param  $op
 * @param  $order
 * @return array
 */
function uc_payment_method_financing_invoice($op, &$order, $form = NULL, &$form_state = NULL) {
  if ($op === 'settings') {
    // Uses a common settings form
    return false;
  }

  return uc_payment_method_factoring($op, $order, $form, $form_state);
}

/**
 * Add PayEx Transaction
 * @param $order_id
 * @param $transaction_id
 * @param $transaction_status
 * @param $transaction_data
 * @param null $date
 * @return DatabaseStatementInterface|int
 * @throws Exception
 */
function uc_factoring_transaction_add($order_id, $transaction_id, $transaction_status, $transaction_data, $date = NULL) {
  $id = db_insert('uc_factoring_transactions')
    ->fields(array(
      'order_id' => $order_id,
      'transaction_id' => $transaction_id,
      'transaction_status' => $transaction_status,
      'transaction_data' => serialize($transaction_data),
      'date' => date('Y-m-d H:i:s', is_null($date) ? time() : $date),
    ))
    ->execute();

  return $id;
}

/**
 * Load PayEx Transaction
 * @param $transaction_id
 * @return mixed
 */
function uc_factoring_transaction_load($transaction_id) {
  $select = db_select('uc_factoring_transactions')
    ->fields('uc_factoring_transactions')
    ->condition('transaction_id', $transaction_id, '=');

  return $select->execute()->fetch();
}

/**
 * Load PayEx Transactions by Order Id
 * @param $order_id
 * @return mixed
 */
function uc_factoring_transactions_load_by_order_id($order_id) {
  $select = db_select('uc_factoring_transactions')
    ->fields('uc_factoring_transactions')
    ->condition('order_id', $order_id, '=')
    ->orderBy('date', 'DESC');

  return $select->execute()->fetchAssoc();
}

/**
 * Calculates the taxes that should be included in a product's display price.
 * This function like uc_taxes_get_included_tax()
 * @param $product
 * @param $order
 * @return array
 */
function uc_factoring_get_included_tax($product, $order) {
  $amount = 0;
  $suffixes = array();
  foreach (uc_taxes_filter_rates($order) as $tax) {
    $taxable = uc_taxes_apply_item_tax($product, $tax);
    if (!empty($taxable)) {
      $amount += $taxable * $tax->rate;
      $suffixes[$tax->inclusion_text] = $tax->inclusion_text;
    }
  }

  return array($amount, $suffixes);
}

/**
 * Get Shipping Price with Tax
 * @param $price
 * @return mixed
 */
function uc_factoring_get_shipping_price_with_tax($price) {
  // Display shipping quote including tax (if enabled and tax applied)
  if (module_exists('uc_taxes')) {
    $tax_rates = uc_taxes_rate_load(NULL);
    foreach ($tax_rates as $tax) {
      if (in_array('shipping', $tax->taxed_line_items)) {
        $price = $price * (1 + $tax->rate);
      }
    }
  }

  return $price;
}

/**
 * Get verbose error message by Error Code
 * @param $errorCode
 * @return string | false
 */
function uc_factoring_get_error_message($errorCode) {
  $errorMessages = array(
    'REJECTED_BY_ACQUIRER' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    //'Error_Generic' => t('An unhandled exception occurred'),
    '3DSecureDirectoryServerError' => t('A problem with Visa or MasterCards directory server, that communicates transactions for 3D-Secure verification'),
    'AcquirerComunicationError' => t('Communication error with the acquiring bank'),
    'AmountNotEqualOrderLinesTotal' => t('The sum of your order lines is not equal to the price set in initialize'),
    'CardNotEligible' => t('Your customers card is not eligible for this kind of purchase, your customer can contact their bank for more information'),
    'CreditCard_Error' => t('Some problem occurred with the credit card, your customer can contact their bank for more information'),
    'PaymentRefusedByFinancialInstitution' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    'Merchant_InvalidAccountNumber' => t('The merchant account number sent in on request is invalid'),
    'Merchant_InvalidIpAddress' => t('The IP address the request comes from is not registered in PayEx, you can set it up in PayEx Admin under Merchant profile'),
    'Access_MissingAccessProperties' => t('The merchant does not have access to requested functionality'),
    'Access_DuplicateRequest' => t('Your customers bank declined the transaction, your customer can contact their bank for more information'),
    'Admin_AccountTerminated' => t('The merchant account is not active'),
    'Admin_AccountDisabled' => t('The merchant account is not active'),
    'ValidationError_AccountLockedOut' => t('The merchant account is locked out'),
    'ValidationError_Generic' => t('Generic validation error'),
    'ValidationError_HashNotValid' => t('The hash on request is not valid, this might be due to the encryption key being incorrect'),
    //'ValidationError_InvalidParameter' => t('One of the input parameters has invalid data. See paramName and description for more information'),
    'OperationCancelledbyCustomer' => t('The operation was cancelled by the client'),
    'PaymentDeclinedDoToUnspecifiedErr' => t('Unexpecter error at 3rd party'),
    'InvalidAmount' => t('The amount is not valid for this operation'),
    'NoRecordFound' => t('No data found'),
    'OperationNotAllowed' => t('The operation is not allowed, transaction is in invalid state'),
    'ACQUIRER_HOST_OFFLINE' => t('Could not get in touch with the card issuer'),
    'ARCOT_MERCHANT_PLUGIN_ERROR' => t('The card could not be verified'),
    'REJECTED_BY_ACQUIRER_CARD_BLACKLISTED' => t('There is a problem with this card'),
    'REJECTED_BY_ACQUIRER_CARD_EXPIRED' => t('The card expired'),
    'REJECTED_BY_ACQUIRER_INSUFFICIENT_FUNDS' => t('Insufficient funds'),
    'REJECTED_BY_ACQUIRER_INVALID_AMOUNT' => t('Incorrect amount'),
    'USER_CANCELED' => t('Payment cancelled'),
    'CardNotAcceptedForThisPurchase' => t('Your Credit Card not accepted for this purchase')
  );
  $errorMessages = array_change_key_case($errorMessages, CASE_UPPER);
  $errorCode = mb_strtoupper($errorCode);
  return isset($errorMessages[$errorCode]) ? $errorMessages[$errorCode] : FALSE;
}

/**
 * Extract Error Message from PayEx data
 * @param array $details
 * @return null|string
 */
function uc_factoring_extract_error_message(array $details) {
  $errorCode = isset($details['transactionErrorCode']) ? $details['transactionErrorCode'] : $details['errorCode'];
  $errorMessage = uc_factoring_get_error_message($errorCode);
  if ($errorMessage) {
    return $errorMessage;
  }

  $errorCode = isset($details['transactionErrorCode']) ? $details['transactionErrorCode'] : '';
  $errorDescription = isset($details['transactionThirdPartyError']) ? $details['transactionThirdPartyError'] : '';
  if (empty($errorCode) && empty($errorDescription)) {
    $errorCode = $details['code'];
    $errorDescription = $details['description'];
  }

  return t('PayEx error: @message', array('@message' => $errorCode . ' (' . $errorDescription . ')'));
}

/**
 * Generate Invoice Print XML
 * @param $order
 * @return mixed
 */
function uc_factoring_invoice_xml($order) {
  $dom = new DOMDocument('1.0', 'utf-8');
  $OnlineInvoice = $dom->createElement('OnlineInvoice');
  $dom->appendChild($OnlineInvoice);
  $OnlineInvoice->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $OnlineInvoice->setAttributeNS('http://www.w3.org/2001/XMLSchema-instance', 'xsd', 'http://www.w3.org/2001/XMLSchema');

  $OrderLines = $dom->createElement('OrderLines');
  $OnlineInvoice->appendChild($OrderLines);

  foreach ($order->products as $_id => $product) {
    $price = (float) $product->price;
    $qty = (int) $product->qty;
    $tax_amount = 0;
    $tax_percent = 0;

    // Calculate tax
    if (module_exists('uc_taxes')) {
      list($tax_amount, $suffixes) = uc_factoring_get_included_tax($product, $order);
      $tax_percent = ($tax_amount > 0) ? round(100 / ($price / $tax_amount)) : 0;
    }

    $OrderLine = $dom->createElement('OrderLine');
    $OrderLine->appendChild($dom->createElement('Product', $product->title));
    $OrderLine->appendChild($dom->createElement('Qty', $qty));
    $OrderLine->appendChild($dom->createElement('UnitPrice', $price));
    $OrderLine->appendChild($dom->createElement('VatRate', $tax_percent));
    $OrderLine->appendChild($dom->createElement('VatAmount', $tax_amount * $qty));
    $OrderLine->appendChild($dom->createElement('Amount', ($price + $tax_amount) * $qty));
    $OrderLines->appendChild($OrderLine);
  }

  // Add Shipping Line
  foreach ($order->line_items as $_id => $item) {
    if ($item['type'] === 'shipping') {
      $shipping_price = (float) $item['amount'];
      $shipping_price_with_tax = uc_payex_get_shipping_price_with_tax($shipping_price);
      $shipping_tax = $shipping_price_with_tax - $shipping_price;
      $tax_percent = ($shipping_tax > 0) ? round(100 / ($shipping_price / $shipping_tax)) : 0;

      $OrderLine = $dom->createElement('OrderLine');
      $OrderLine->appendChild($dom->createElement('Product', $item['title']));
      $OrderLine->appendChild($dom->createElement('Qty', 1));
      $OrderLine->appendChild($dom->createElement('UnitPrice', $shipping_price));
      $OrderLine->appendChild($dom->createElement('VatRate', $tax_percent));
      $OrderLine->appendChild($dom->createElement('VatAmount', $shipping_tax));
      $OrderLine->appendChild($dom->createElement('Amount', $shipping_price_with_tax));
      $OrderLines->appendChild($OrderLine);
    }
  }

  return str_replace("\n", '', $dom->saveXML());
}